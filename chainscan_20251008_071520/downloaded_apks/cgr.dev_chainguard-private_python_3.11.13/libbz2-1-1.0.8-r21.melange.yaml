package:
  name: bzip2
  version: 1.0.8
  epoch: 21
  description: a library implementing the bzip2 compression algorithms
  commit: 2619f318eef93ed7f288a87b446626ed9eff6488
  copyright:
    - license: MPL-2.0 AND MIT
  resources: {}
environment:
  contents:
    build_repositories:
      - https://apk.cgr.dev/chainguard
      - https://packages.wolfi.dev/os
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
      - binutils=2.45-r0
      - build-base=1-r8
      - busybox=1.37.0-r47
      - ca-certificates-bundle=20250619-r5
      - cyrus-sasl=2.1.28-r43
      - gcc=15.1.0-r4
      - gdbm=1.26-r0
      - git=2.50.1-r1
      - glibc-dev=2.41-r56
      - glibc-locale-posix=2.41-r56
      - glibc=2.41-r56
      - gmp=6.3.0-r8
      - heimdal-libs=7.8.0-r42
      - isl=0.27-r4
      - keyutils-libs=1.6.3-r36
      - krb5-conf=1.0-r7
      - krb5-libs=1.21.3-r45
      - ld-linux=2.41-r56
      - libatomic=15.1.0-r4
      - libbrotlicommon1=1.1.0-r6
      - libbrotlidec1=1.1.0-r6
      - libcom_err=1.47.3-r0
      - libcrypt1=2.41-r56
      - libcrypto3=3.5.1-r1
      - libcurl-openssl4=8.15.0-r4
      - libexpat1=2.7.1-r2
      - libgcc=15.1.0-r4
      - libgo=15.1.0-r4
      - libgomp=15.1.0-r4
      - libidn2=2.3.8-r3
      - libldap=2.6.10-r5
      - libnghttp2-14=1.66.0-r1
      - libpcre2-8-0=10.45-r3
      - libpsl=0.21.5-r6
      - libquadmath=15.1.0-r4
      - libssl3=3.5.1-r1
      - libstdc++-dev=15.1.0-r4
      - libstdc++=15.1.0-r4
      - libunistring=1.3-r4
      - libverto=0.3.2-r6
      - libxcrypt-dev=4.4.38-r3
      - libxcrypt=4.4.38-r3
      - libzstd1=1.5.7-r3
      - linux-headers=6.16-r0
      - make=4.4.1-r8
      - mpc=1.3.1-r7
      - mpfr=4.2.2-r2
      - ncurses-terminfo-base=6.5_p20250621-r1
      - ncurses=6.5_p20250621-r1
      - nss-db=2.41-r56
      - nss-hesiod=2.41-r56
      - openssf-compiler-options=20240627-r26
      - patch=2.8-r3
      - pkgconf=2.5.1-r1
      - posix-cc-wrappers=1-r7
      - readline=8.3-r1
      - scanelf=1.3.8-r5
      - sqlite-libs=3.50.4-r0
      - wolfi-baselayout=20230201-r23
      - zlib=1.3.1-r51
  accounts:
    run-as: ""
    users:
      - username: build
        uid: 1000
        gid: 1000
        shell: ""
        homedir: /home/build
    groups:
      - groupname: build
        gid: 1000
        members:
          - build
  archs:
    - amd64
  environment:
    GOFLAGS: ""
    GOMODCACHE: /var/cache/melange/gomodcache
    GOPATH: /home/build/.cache/go
    GOTOOLCHAIN: local
    HOME: /home/build
    PYTHONHASHSEED: "0"
pipeline:
  - uses: git-checkout
    with:
      expected-commit: 6a8690fc8d26c815e798c588f796eabe9d684cf0
      repository: https://sourceware.org/git/bzip2.git
      tag: bzip2-1.0.8
    pipeline:
      - runs: |
          #!/bin/sh
          set -e
          msg() { echo "[git checkout]" "$@"; }
          fail() {
          	msg FAIL "$@"
          	exit 1
          }
          vr() {
          	msg "execute:" "$@"
          	"$@"
          }
          process_cherry_picks() {
          	local cpicksf="$1" oifs="$IFS" count=0
          	local fetched_branches=""
          	local sdate=${SOURCE_DATE_EPOCH:-0}
          	if [ "$sdate" -lt 315532800 ]; then
          		msg "Setting commit date to Jan 1, 1980 (SOURCE_DATE_EPOCH found ${SOURCE_DATE_EPOCH})"
          		sdate=315532800
          	fi
          	if [ -z "$cpicksf" ]; then
          		return 0
          	fi
          	if [ ! -f "$cpicksf" ]; then
          		msg "cherry picks input '$cpicksf' is not a file"
          		return 1
          	fi

          	local line="" branch="" hash="" comment=""
          	while IFS= read -r line; do

          		line=${line%%#*}
          		[ -z "$line" ] && continue

          		if ! echo "$line" | grep -q ':'; then
          			msg "Invalid format, expected '[branch/]commit: comment'. Found: $line"
          			return 1
          		fi

          		branch=${line%%:*}
          		comment=${line#*:}
          		comment=$(
          			set -f
          			echo $comment
          		)

          		if [ -z "$comment" ]; then
          			msg "Empty comment for cherry-pick: $line"
          			return 1
          		fi

          		hash=${branch##*/}

          		[ "$branch" != "$hash" ] && branch=${branch%/*} || branch=""

          		if [ -n "$branch" ]; then
          			case " $fetched_branches " in
          			*" $branch "*) ;;
          			*)
          				vr git fetch origin $branch:$branch || {
          					msg "failed to fetch branch $branch"
          					return 1
          				}
          				fetched_branches="$fetched_branches $branch "
          				;;
          			esac
          		fi

          		vr env \
          			GIT_COMMITTER_DATE="@$sdate" \
          			git cherry-pick -x "$hash" || {
          			msg "failed to cherry-pick $hash from branch $branch"
          			return 1
          		}

          		msg "Cherry-picked $hash from $branch with comment: $comment"

          		count=$((count + 1))
          	done <"$cpicksf"

          	if [ $count -gt 0 ]; then
          		msg "applied $count cherry-pick(s). head is now $(git rev-parse HEAD)"
          	fi
          }
          main() {
          	local repo=$1 dest=${2:-.} depth=${3:-"unset"} branch=$4
          	local tag=$5 expcommit=$6 recurse=${7:-false}
          	local cherry_pick="$8"
          	msg "repo='$repo' dest='$dest' depth='$depth' branch='$branch'" \
          		"tag='$tag' expcommit='$expcommit' recurse='$recurse'"

          	case "$recurse" in
          	true | false) : ;;
          	*) fail "recurse must be true or false, not '$recurse'" ;;
          	esac

          	[ -n "$repo" ] || fail "repository not provided"

          	if [ -z "$branch" ] && [ -z "$tag" ]; then
          		msg "Warning: you have not specified a branch or tag."
          	elif [ -n "$branch" ] && [ -n "$tag" ]; then
          		fail "both branch ($branch) and tag ($tag) are specified."
          	fi

          	[ -n "$expcommit" ] ||
          		msg "Warning: no expected-commit"

          	local flags="" depthflag="" dest_fullpath="" workdir=""
          	local remote="origin" rcfile="" rc="" quiet="--quiet"
          	flags="--config=advice.detachedHead=false"
          	[ -n "$branch" ] && flags="$flags --branch=$branch"
          	[ -n "$tag" ] && flags="$flags --branch=$tag"
          	[ "$recurse" = "true" ] && flags="$flags --recurse-submodules"

          	if [ "$depth" = "unset" ]; then
          		depth=1
          		if [ -n "$branch" -a -n "$expcommit" ]; then

          			depth=-1
          		fi
          	fi

          	[ "$depth" = "-1" ] || depthflag="--depth=$depth"

          	workdir=$(mktemp -d)
          	rcfile=$(mktemp)
          	mkdir -p "$dest"
          	dest_fullpath=$(realpath "$dest")

          	vr git config --global --add safe.directory "$workdir"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	vr git clone $quiet "--origin=$remote" \
          		"--config=user.name=Melange Build" \
          		"--config=user.email=melange-build@cgr.dev" \
          		$flags \
          		${depthflag:+"$depthflag"} "$repo" "$workdir"

          	vr cd "$workdir"
          	msg "tar -c . | tar -C \"$dest_fullpath\" -x"
          	(
          		tar -c .
          		echo $? >"$rcfile"
          	) | tar -C "$dest_fullpath" -x --no-same-owner
          	read rc <"$rcfile" || fail "failed to read rc file"
          	[ $rc -eq 0 ] || fail "tar creation in $workdir failed"

          	rm -rf "$workdir"
          	vr cd "$dest_fullpath"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	local foundcommit="" tagobj=""
          	if [ -z "$tag" ]; then
          		foundcommit=$(git rev-parse --verify HEAD)
          		if [ -n "$expcommit" ] && [ "$expcommit" != "$foundcommit" ]; then
          			if [ "$depth" = "-1" ]; then
          				msg "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, performing reset"
          				vr git reset --hard "$expcommit"
          			else
          				fail "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, set depth to -1 to attempt a reset"
          			fi
          		fi
          		msg "tip of ${branch:-HEAD} is commit $foundcommit"
          		process_cherry_picks "$cherry_pick" || fail "failed to apply cherry-pick"
          		return 0
          	fi

          	vr git fetch $quiet $remote ${depthflag:-"$depthflag"} --no-tags \
          		"+refs/tags/$tag:refs/$remote/tags/$tag"
          	vr git checkout $quiet "$remote/tags/$tag"

          	foundcommit=$(git rev-parse --verify HEAD)
          	if [ -z "$expcommit" ] || [ "$expcommit" = "$foundcommit" ]; then
          		msg "tag $tag is $foundcommit"
          	else

          		tagobj=$(git rev-parse --verify --end-of-options \
          			"refs/$remote/tags/$tag")
          		if [ "$expcommit" != "$tagobj" ]; then
          			[ "$tagobj" != "$expcommit" ] &&
          				msg "tag object hash was $tagobj"
          			fail "Expected commit $expcommit for $tag, found $foundcommit"
          		fi

          		msg "Warning: The provided expected-commit ($expcommit)"
          		msg "was the hash of the annotated tag object for $tag."
          		msg "Update to set expected-commit to $foundcommit"
          	fi

          	process_cherry_picks "$cherry_pick" ||
          		fail "failed to apply cherry-pick"

          	return 0
          }
          cpickf=$(mktemp) || {
          	echo "failed mktemp"
          	exit 1
          }
          cat >"$cpickf" <<"END_CHERRY_PICKS"

          END_CHERRY_PICKS
          main \
          	"https://sourceware.org/git/bzip2.git" "." \
          	"unset" "" \
          	"bzip2-1.0.8" "6a8690fc8d26c815e798c588f796eabe9d684cf0" \
          	"false" "$cpickf"
          rm -f "$cpickf"
  - uses: patch
    with:
      patches: bzip2-1.0.2-progress.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'bzip2-1.0.2-progress.patch' ]; then
          		series=$(mktemp)
          		echo 'bzip2-1.0.2-progress.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - uses: patch
    with:
      patches: bzip2-1.0.3-no-test.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'bzip2-1.0.3-no-test.patch' ]; then
          		series=$(mktemp)
          		echo 'bzip2-1.0.3-no-test.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - uses: patch
    with:
      patches: bzip2-1.0.4-makefile-CFLAGS.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'bzip2-1.0.4-makefile-CFLAGS.patch' ]; then
          		series=$(mktemp)
          		echo 'bzip2-1.0.4-makefile-CFLAGS.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - uses: patch
    with:
      patches: bzip2-1.0.4-man-links.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'bzip2-1.0.4-man-links.patch' ]; then
          		series=$(mktemp)
          		echo 'bzip2-1.0.4-man-links.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - uses: patch
    with:
      patches: saneso.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'saneso.patch' ]; then
          		series=$(mktemp)
          		echo 'saneso.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - runs: |
      sed -i \
      	-e 's:\$(PREFIX)/man:\$(PREFIX)/share/man:g' \
      	-e 's:ln -s -f $(PREFIX)/bin/:ln -s :' \
      	Makefile
      sed -i \
      	-e "s:1\.0\.4:1.0.8:" \
      	bzip2.1 bzip2.txt Makefile-libbz2_so manual.*
  - runs: |
      make -f Makefile-libbz2_so all
      make all
  - runs: |
      make PREFIX="/home/build/melange-out/bzip2/usr" install
  - uses: strip
    pipeline:
      - runs: |
          scanelf --recursive --nobanner --osabi --etype "ET_DYN,ET_EXEC" . |
          	while read type osabi filename; do

          		[ "$osabi" != "STANDALONE" ] || continue

          		strip -g "${filename}" || [ ! -e "$filename" ]
          	done
        working-directory: /home/build/melange-out/bzip2
subpackages:
  - name: libbz2-1
    pipeline:
      - runs: |
          install -D libbz2.so.1.0.8 "/home/build/melange-out/libbz2-1"/usr/lib/libbz2.so.1.0.8
          ln -s libbz2.so.1.0.8 "/home/build/melange-out/libbz2-1"/usr/lib/libbz2.so.1
          ln -s libbz2.so.1 "/home/build/melange-out/libbz2-1/usr/lib/libbz2.so.1.0"
    description: bzip2 shared library
    commit: 2619f318eef93ed7f288a87b446626ed9eff6488
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - libbz2-1
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="libbz2-1" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: bzip2-dev
    pipeline:
      - uses: split/dev
        pipeline:
          - runs: |
              PACKAGE_DIR="/home/build/melange-out/bzip2"
              if [ -n "" ]; then
              	PACKAGE_DIR="/home/build/melange-out/"
              fi
              if [ "$PACKAGE_DIR" == "/home/build/melange-out/bzip2-dev" ]; then
              	echo "ERROR: Package can not split files from itself!" && exit 1
              fi
              i= j=
              cd "$PACKAGE_DIR" || exit 0
              libdirs=usr/
              [ -d lib/ ] && libdirs="lib/ $libdirs"
              for i in usr/include usr/lib/pkgconfig usr/share/pkgconfig \
              	usr/share/aclocal usr/share/gettext \
              	usr/bin/*-config usr/bin/*_config usr/share/vala/vapi \
              	usr/share/gir-[0-9]* usr/share/qt*/mkspecs \
              	usr/lib/qt*/mkspecs \
              	usr/lib/cmake usr/share/cmake \
              	usr/lib/glade/modules usr/share/glade/catalogs \
              	$(find . -name include -type d) \
              	$(find $libdirs -name '*.a' 2>/dev/null) \
              	$(find $libdirs -name '*.[cho]' \
              		-o -name '*.prl' 2>/dev/null); do
              	if [ -e "$PACKAGE_DIR/$i" ] || [ -L "$PACKAGE_DIR/$i" ]; then
              		d="/home/build/melange-out/bzip2-dev/${i%/*}"
              		mkdir -p "$d"
              		mv "$PACKAGE_DIR/$i" "$d"
              		rmdir "$PACKAGE_DIR/${i%/*}" 2>/dev/null || :
              	fi
              done
              for i in lib/*.so usr/lib/*.so; do
              	if [ -L "$i" ]; then
              		mkdir -p "/home/build/melange-out/bzip2-dev"/"${i%/*}"
              		mv "$i" "/home/build/melange-out/bzip2-dev/$i" || return 1
              	fi
              done
      - runs: |
          ln -s libbz2.so.1 "/home/build/melange-out/bzip2-dev"/usr/lib/libbz2.so
    description: bzip2 headers
    commit: 2619f318eef93ed7f288a87b446626ed9eff6488
    test:
      environment:
        contents:
          packages:
            - bzip2-dev
            - ldd-check
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="bzip2-dev" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: bzip2-doc
    pipeline:
      - uses: split/manpages
        pipeline:
          - runs: |
              PACKAGE_DIR="/home/build/melange-out/bzip2"
              if [ -n "" ]; then
              	PACKAGE_DIR="/home/build/melange-out/"
              fi
              if [ "$PACKAGE_DIR" = "/home/build/melange-out/bzip2-doc" ]; then
              	echo "ERROR: Package can not split files from itself!" && exit 1
              fi
              for mandir in \
              	"$PACKAGE_DIR/usr/share/man" \
              	"$PACKAGE_DIR/usr/local/share/man" \
              	"$PACKAGE_DIR/usr/man"; do

              	if [ -d "$mandir" ]; then
              		mkdir -p "/home/build/melange-out/bzip2-doc/usr/share/man"
              		mv "$mandir"/* "/home/build/melange-out/bzip2-doc/usr/share/man/"
              		rmdir --parents --ignore-fail-on-non-empty "$mandir"
              	fi
              done
    description: bzip2 docs
    commit: 2619f318eef93ed7f288a87b446626ed9eff6488
    test:
      environment:
        contents:
          packages:
            - apk-tools
            - bzip2-doc
            - grep
            - man-db
            - texinfo
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/docs
          pipeline:
            - name: docs readability check
              runs: |
                doc_pkg=$(basename /home/build/melange-out/bzip2-doc)
                if [ $(apk info -qL "$doc_pkg" | grep -v "^var/lib/db/sbom" | grep -v "^$" | wc -l) -eq 0 ]; then
                	echo "See:"
                	apk info -qL "$doc_pkg"
                	echo "This package [$doc_pkg] is completely empty (i.e. installs no files)."
                	echo "Please check the package build for proper docs installation, and either:"
                	echo "  (a) fix the docs subpackage build to actually include documentation (check the split/manpages and split/infodir pipelines), or"
                	echo "  (b) remove the test/docs pipeline (if for some reason we want an empty docs package), or"
                	echo "  (c) remove the docs subpackage entirely"
                	exit 1
                fi
                cd /
                doc_files=false
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/man/" | grep -v "^usr/share/man/db/"); do
                	if [ -f /"$doc_file" ]; then

                		man -l /"$doc_file" >/dev/null
                		doc_files=true
                	fi
                done
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/info/"); do
                	if [ -f /"$doc_file" ]; then

                		[ $(info -f /"$doc_file" -o - | wc -l) -gt 0 ] && doc_files=true
                	fi
                done
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/"); do
                	if [ -f /"$doc_file" ]; then

                		cat /"$doc_file" >/dev/null
                		doc_files=true
                	fi
                done
                if [ $doc_files = "false" ]; then
                	echo "See:"
                	apk info -qL "$doc_pkg"
                	echo "This package [$doc_pkg] installs files, but no usable documentation"
                	echo "Please check the package build for proper docs installation, and either:"
                	echo "  (a) fix the docs subpackage build to actually include docs (check the split/manpages and split/infodir pipelines), or"
                	echo "  (b) remove the test/docs pipeline"
                	exit 1
                fi
update:
  enabled: true
  manual: false
  require-sequential: false
  release-monitor:
    identifier: 237
test:
  environment:
    contents:
      packages:
        - apk-tools
        - bzip2
        - man-db
    accounts:
      run-as: ""
      users:
        - username: build
          uid: 1000
          gid: 1000
          shell: ""
          homedir: ""
      groups:
        - groupname: build
          gid: 1000
          members:
            - build
  pipeline:
    - runs: |
        bunzip2 --help
        bzcat --help
        bzip2 --version
        bzless --version
        bzmore --version
        bzip2 --help
        bzless --help
        bzmore --help
    - uses: test/no-docs
      pipeline:
        - name: primary package docs check
          runs: |
            primary_pkg=$(basename /home/build/melange-out/bzip2)
            case "$primary_pkg" in
            *-doc)
            	echo "Skipping documentation package [$primary_pkg]"
            	echo "Remove the \"test/no-docs\" pipeline from documentation packages"
            	exit 0
            	;;
            esac
            cd /
            doc_violations=false
            violation_count=0
            has_manpages=false
            has_infodir=false
            default_paths="usr/share/man usr/local/share/man usr/man"
            all_paths="$default_paths"
            if command -v man >/dev/null 2>&1; then
            	for path in $(man --path 2>/dev/null | tr ':' ' '); do
            		clean_path=$(echo "$path" | sed 's|^/||')
            		if [ -n "$clean_path" ]; then

            			path_exists=false
            			for existing_path in $all_paths; do
            				if [ "$clean_path" = "$existing_path" ]; then
            					path_exists=true
            					break
            				fi
            			done

            			if [ "$path_exists" = "false" ]; then
            				all_paths="$all_paths $clean_path"
            			fi
            		fi
            	done
            fi
            man_paths=""
            for path in $all_paths; do
            	if [ -z "$man_paths" ]; then
            		man_paths="^$path/"
            	else
            		man_paths="$man_paths|^$path/"
            	fi
            done
            for doc_file in $(apk info -qL "$primary_pkg" | grep -E "$man_paths"); do
            	if [ -f "/$doc_file" ]; then
            		if [ "$doc_violations" = "false" ]; then
            			echo "Primary package [$primary_pkg] contains documentation files:"
            			doc_violations=true
            		fi
            		has_manpages=true
            		violation_count=$((violation_count + 1))
            		echo "  /$doc_file (manual page)"
            	fi
            done
            for doc_file in $(apk info -qL "$primary_pkg" | grep -E "^usr/share/info/|usr/local/share/info/"); do
            	if [ -f "/$doc_file" ] && [ "$(basename "$doc_file")" != "dir" ]; then
            		if [ "$doc_violations" = "false" ]; then
            			echo "Primary package [$primary_pkg] contains documentation files:"
            			doc_violations=true
            		fi
            		has_infodir=true
            		violation_count=$((violation_count + 1))
            		echo "  /$doc_file (info page)"
            	fi
            done
            if [ "$doc_violations" = "true" ]; then
            	echo ""
            	echo "These files should be moved to a -doc subpackage."
            	echo "Please add the following split pipeline(s):"
            	if [ "$has_manpages" = "true" ]; then
            		echo "  - split/manpages (for manual pages)"
            	fi
            	if [ "$has_infodir" = "true" ]; then
            		echo "  - split/infodir (for GNU info pages)"
            	fi
            	echo ""
            	echo "Total documentation files found: $violation_count"
            	exit 1
            fi
            echo "Primary package [$primary_pkg] does not contain documentation files"
