package:
  name: openssl
  version: 3.5.2
  epoch: 1
  description: the OpenSSL cryptography suite
  commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
  copyright:
    - license: Apache-2.0
  dependencies:
    replaces:
      - openssl-config<3.4.0
    replaces-priority: "5"
  resources:
    cpu: "16"
    memory: 16Gi
environment:
  contents:
    build_repositories:
      - https://apk.cgr.dev/chainguard
      - https://packages.wolfi.dev/os
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
      - binutils=2.45-r0
      - build-base=1-r8
      - busybox=1.37.0-r48
      - ca-certificates-bundle=20250619-r5
      - cyrus-sasl=2.1.28-r44
      - gcc=15.2.0-r0
      - gdbm=1.26-r1
      - git=2.50.1-r1
      - glibc-dev=2.41-r56
      - glibc-locale-posix=2.41-r56
      - glibc=2.41-r56
      - gmp=6.3.0-r8
      - heimdal-libs=7.8.0-r42
      - isl=0.27-r4
      - jitterentropy-library-dev=3.5.0-r0
      - jitterentropy-library=3.5.0-r0
      - keyutils-libs=1.6.3-r37
      - krb5-conf=1.0-r7
      - krb5-libs=1.22-r2
      - ld-linux=2.41-r56
      - libatomic=15.2.0-r0
      - libbrotlicommon1=1.1.0-r7
      - libbrotlidec1=1.1.0-r7
      - libbz2-1=1.0.8-r21
      - libcom_err=1.47.3-r1
      - libcrypt1=2.41-r56
      - libcrypto3=3.5.2-r0
      - libcurl-openssl4=8.15.0-r4
      - libexpat1=2.7.1-r3
      - libgcc=15.2.0-r0
      - libgo=15.2.0-r0
      - libgomp=15.2.0-r0
      - libidn2=2.3.8-r3
      - libldap=2.6.10-r5
      - libnghttp2-14=1.66.0-r1
      - libpcre2-8-0=10.45-r3
      - libpsl=0.21.5-r6
      - libquadmath=15.2.0-r0
      - libssl3=3.5.2-r0
      - libstdc++-dev=15.2.0-r0
      - libstdc++=15.2.0-r0
      - libunistring=1.3-r4
      - libverto=0.3.2-r6
      - libxcrypt-dev=4.4.38-r4
      - libxcrypt=4.4.38-r4
      - libzstd1=1.5.7-r3
      - linux-headers=6.16.1-r0
      - make=4.4.1-r8
      - mpc=1.3.1-r7
      - mpfr=4.2.2-r2
      - ncurses-terminfo-base=6.5_p20250621-r1
      - ncurses=6.5_p20250621-r1
      - nss-db=2.41-r56
      - nss-hesiod=2.41-r56
      - openssf-compiler-options=20240627-r26
      - patch=2.8-r3
      - perl=5.42.0-r1
      - pkgconf=2.5.1-r1
      - posix-cc-wrappers=1-r7
      - readline=8.3-r1
      - scanelf=1.3.8-r5
      - sqlite-libs=3.50.4-r0
      - wolfi-baselayout=20230201-r23
      - zlib=1.3.1-r51
  accounts:
    run-as: ""
    users:
      - username: build
        uid: 1000
        gid: 1000
        shell: ""
        homedir: /home/build
    groups:
      - groupname: build
        gid: 1000
        members:
          - build
  archs:
    - amd64
  environment:
    CFLAGS: -g -ffile-prefix-map=/home/build=/usr/src/openssl
    GOFLAGS: ""
    GOMODCACHE: /var/cache/melange/gomodcache
    GOPATH: /home/build/.cache/go
    GOTOOLCHAIN: local
    HOME: /home/build
    PYTHONHASHSEED: "0"
pipeline:
  - uses: git-checkout
    with:
      expected-commit: 0893a62353583343eb712adef6debdfbe597c227
      repository: https://github.com/openssl/openssl
      tag: openssl-3.5.2
    pipeline:
      - runs: |
          #!/bin/sh
          set -e
          msg() { echo "[git checkout]" "$@"; }
          fail() {
          	msg FAIL "$@"
          	exit 1
          }
          vr() {
          	msg "execute:" "$@"
          	"$@"
          }
          process_cherry_picks() {
          	local cpicksf="$1" oifs="$IFS" count=0
          	local fetched_branches=""
          	local sdate=${SOURCE_DATE_EPOCH:-0}
          	if [ "$sdate" -lt 315532800 ]; then
          		msg "Setting commit date to Jan 1, 1980 (SOURCE_DATE_EPOCH found ${SOURCE_DATE_EPOCH})"
          		sdate=315532800
          	fi
          	if [ -z "$cpicksf" ]; then
          		return 0
          	fi
          	if [ ! -f "$cpicksf" ]; then
          		msg "cherry picks input '$cpicksf' is not a file"
          		return 1
          	fi

          	local line="" branch="" hash="" comment=""
          	while IFS= read -r line; do

          		line=${line%%#*}
          		[ -z "$line" ] && continue

          		if ! echo "$line" | grep -q ':'; then
          			msg "Invalid format, expected '[branch/]commit: comment'. Found: $line"
          			return 1
          		fi

          		branch=${line%%:*}
          		comment=${line#*:}
          		comment=$(
          			set -f
          			echo $comment
          		)

          		if [ -z "$comment" ]; then
          			msg "Empty comment for cherry-pick: $line"
          			return 1
          		fi

          		hash=${branch##*/}

          		[ "$branch" != "$hash" ] && branch=${branch%/*} || branch=""

          		if [ -n "$branch" ]; then
          			case " $fetched_branches " in
          			*" $branch "*) ;;
          			*)
          				vr git fetch origin $branch:$branch || {
          					msg "failed to fetch branch $branch"
          					return 1
          				}
          				fetched_branches="$fetched_branches $branch "
          				;;
          			esac
          		fi

          		vr env \
          			GIT_COMMITTER_DATE="@$sdate" \
          			git cherry-pick -x "$hash" || {
          			msg "failed to cherry-pick $hash from branch $branch"
          			return 1
          		}

          		msg "Cherry-picked $hash from $branch with comment: $comment"

          		count=$((count + 1))
          	done <"$cpicksf"

          	if [ $count -gt 0 ]; then
          		msg "applied $count cherry-pick(s). head is now $(git rev-parse HEAD)"
          	fi
          }
          main() {
          	local repo=$1 dest=${2:-.} depth=${3:-"unset"} branch=$4
          	local tag=$5 expcommit=$6 recurse=${7:-false}
          	local cherry_pick="$8"
          	msg "repo='$repo' dest='$dest' depth='$depth' branch='$branch'" \
          		"tag='$tag' expcommit='$expcommit' recurse='$recurse'"

          	case "$recurse" in
          	true | false) : ;;
          	*) fail "recurse must be true or false, not '$recurse'" ;;
          	esac

          	[ -n "$repo" ] || fail "repository not provided"

          	if [ -z "$branch" ] && [ -z "$tag" ]; then
          		msg "Warning: you have not specified a branch or tag."
          	elif [ -n "$branch" ] && [ -n "$tag" ]; then
          		fail "both branch ($branch) and tag ($tag) are specified."
          	fi

          	[ -n "$expcommit" ] ||
          		msg "Warning: no expected-commit"

          	local flags="" depthflag="" dest_fullpath="" workdir=""
          	local remote="origin" rcfile="" rc="" quiet="--quiet"
          	flags="--config=advice.detachedHead=false"
          	[ -n "$branch" ] && flags="$flags --branch=$branch"
          	[ -n "$tag" ] && flags="$flags --branch=$tag"
          	[ "$recurse" = "true" ] && flags="$flags --recurse-submodules"

          	if [ "$depth" = "unset" ]; then
          		depth=1
          		if [ -n "$branch" -a -n "$expcommit" ]; then

          			depth=-1
          		fi
          	fi

          	[ "$depth" = "-1" ] || depthflag="--depth=$depth"

          	workdir=$(mktemp -d)
          	rcfile=$(mktemp)
          	mkdir -p "$dest"
          	dest_fullpath=$(realpath "$dest")

          	vr git config --global --add safe.directory "$workdir"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	vr git clone $quiet "--origin=$remote" \
          		"--config=user.name=Melange Build" \
          		"--config=user.email=melange-build@cgr.dev" \
          		$flags \
          		${depthflag:+"$depthflag"} "$repo" "$workdir"

          	vr cd "$workdir"
          	msg "tar -c . | tar -C \"$dest_fullpath\" -x"
          	(
          		tar -c .
          		echo $? >"$rcfile"
          	) | tar -C "$dest_fullpath" -x --no-same-owner
          	read rc <"$rcfile" || fail "failed to read rc file"
          	[ $rc -eq 0 ] || fail "tar creation in $workdir failed"

          	rm -rf "$workdir"
          	vr cd "$dest_fullpath"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	local foundcommit="" tagobj=""
          	if [ -z "$tag" ]; then
          		foundcommit=$(git rev-parse --verify HEAD)
          		if [ -n "$expcommit" ] && [ "$expcommit" != "$foundcommit" ]; then
          			if [ "$depth" = "-1" ]; then
          				msg "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, performing reset"
          				vr git reset --hard "$expcommit"
          			else
          				fail "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, set depth to -1 to attempt a reset"
          			fi
          		fi
          		msg "tip of ${branch:-HEAD} is commit $foundcommit"
          		process_cherry_picks "$cherry_pick" || fail "failed to apply cherry-pick"
          		return 0
          	fi

          	vr git fetch $quiet $remote ${depthflag:-"$depthflag"} --no-tags \
          		"+refs/tags/$tag:refs/$remote/tags/$tag"
          	vr git checkout $quiet "$remote/tags/$tag"

          	foundcommit=$(git rev-parse --verify HEAD)
          	if [ -z "$expcommit" ] || [ "$expcommit" = "$foundcommit" ]; then
          		msg "tag $tag is $foundcommit"
          	else

          		tagobj=$(git rev-parse --verify --end-of-options \
          			"refs/$remote/tags/$tag")
          		if [ "$expcommit" != "$tagobj" ]; then
          			[ "$tagobj" != "$expcommit" ] &&
          				msg "tag object hash was $tagobj"
          			fail "Expected commit $expcommit for $tag, found $foundcommit"
          		fi

          		msg "Warning: The provided expected-commit ($expcommit)"
          		msg "was the hash of the annotated tag object for $tag."
          		msg "Update to set expected-commit to $foundcommit"
          	fi

          	process_cherry_picks "$cherry_pick" ||
          		fail "failed to apply cherry-pick"

          	return 0
          }
          cpickf=$(mktemp) || {
          	echo "failed mktemp"
          	exit 1
          }
          cat >"$cpickf" <<"END_CHERRY_PICKS"

          END_CHERRY_PICKS
          main \
          	"https://github.com/openssl/openssl" "." \
          	"unset" "" \
          	"openssl-3.5.2" "0893a62353583343eb712adef6debdfbe597c227" \
          	"false" "$cpickf"
          rm -f "$cpickf"
  - uses: patch
    with:
      patches: fix-jitter.patch 0001-baseprovider-add-MD5-and-SHA1.patch
    pipeline:
      - runs: |
          series=''
          if [ -z $series ]; then
          	if [ -n 'fix-jitter.patch 0001-baseprovider-add-MD5-and-SHA1.patch' ]; then
          		series=$(mktemp)
          		echo 'fix-jitter.patch 0001-baseprovider-add-MD5-and-SHA1.patch' | awk '{ for(i = 1; i <= NF; i++) { print $i; } }' >$series
          	else
          		echo "ERROR: Neither patches or series was set."
          		exit 1
          	fi
          fi
          grep -v -E '^(#|$)' $series | (while read patchfile; do
          	patch '-p1' --fuzz=2 --verbose <$patchfile
          done)
  - name: Create dbg sourcecode
    runs: |
      SRCDIR=$(mktemp -d)
      cp -r . $SRCDIR/
      mkdir -p /home/build/melange-out/openssl-dbg/usr/src/
      mv $SRCDIR /home/build/melange-out/openssl-dbg/usr/src/openssl
      chmod 755 /home/build/melange-out/openssl-dbg/usr/src/openssl
  - name: Configure and build
    runs: |
      perl ./Configure \
      	linux-x86_64 \
      	--prefix=/usr \
      	--libdir=lib \
      	--openssldir=/etc/ssl \
      	enable-ktls \
      	$([ -d /usr/lib/oldglibc ] || echo enable-jitter) \
      	shared \
      	enable-pie \
      	no-zlib \
      	no-async \
      	no-comp \
      	no-idea \
      	no-mdc2 \
      	no-rc5 \
      	no-ec2m \
      	no-sm2 \
      	no-sm4 \
      	no-ssl3 \
      	no-seed \
      	no-weak-ssl-ciphers \
      	-Wa,--noexecstack
      perl configdata.pm --dump
      make -j$(nproc)
      make tests HARNESS_JOBS=10
  - uses: autoconf/make-install
    pipeline:
      - runs: |
          make -C "." install DESTDIR="/home/build/melange-out/openssl" V=1
      - runs: |
          find /home/build/melange-out/openssl -name '*.la' -print -exec rm \{} \;
  - runs: |
      rm /home/build/melange-out/openssl/usr/bin/c_rehash
      rm /home/build/melange-out/openssl/etc/ssl/openssl.cnf
      rm /home/build/melange-out/openssl/etc/ssl/openssl.cnf.dist
      cp openssl.cnf /home/build/melange-out/openssl/etc/ssl/
      rm /home/build/melange-out/openssl/etc/ssl/ct_log_list.cnf
      rm /home/build/melange-out/openssl/etc/ssl/ct_log_list.cnf.dist
subpackages:
  - name: openssl-dbg
    pipeline:
      - uses: split/debug
        pipeline:
          - runs: |
              PACKAGE_DIR="/home/build/melange-out/openssl"
              if [ -n "" ]; then
              	PACKAGE_DIR="/home/build/melange-out/"
              fi
              if [ "$PACKAGE_DIR" == "/home/build/melange-out/openssl-dbg" ]; then
              	echo "ERROR: Package can not split files from itself!" && exit 1
              fi
              mkdir -p "$PACKAGE_DIR/.dbg-tmp"
              scanelf -Ry "$PACKAGE_DIR"/* | while read type src; do
              	if [ "$type" != ET_DYN ]; then
              		continue
              	fi
              	dst=/home/build/melange-out/openssl-dbg/usr/lib/debug/${src#"$PACKAGE_DIR"/}.debug
              	mkdir -p "${dst%/*}"
              	ino=$(stat -c %i "$src")
              	if ! [ -e "$PACKAGE_DIR/.dbg-tmp/$ino" ]; then
              		tmp=$PACKAGE_DIR/.dbg-tmp/${src##*/}
              		objcopy --only-keep-debug "$src" "$dst"
              		objcopy --add-gnu-debuglink="$dst" --strip-unneeded -R .comment "$src" "$tmp"

              		cat "$tmp" >"$src"
              		rm "$tmp"
              		ln "$dst" "$PACKAGE_DIR/.dbg-tmp/$ino"
              	fi
              done
              rm -r "$PACKAGE_DIR/.dbg-tmp"
    description: OpenSSL debug symbols
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
  - name: openssl-doc
    pipeline:
      - uses: split/manpages
        pipeline:
          - runs: |
              PACKAGE_DIR="/home/build/melange-out/openssl"
              if [ -n "" ]; then
              	PACKAGE_DIR="/home/build/melange-out/"
              fi
              if [ "$PACKAGE_DIR" = "/home/build/melange-out/openssl-doc" ]; then
              	echo "ERROR: Package can not split files from itself!" && exit 1
              fi
              for mandir in \
              	"$PACKAGE_DIR/usr/share/man" \
              	"$PACKAGE_DIR/usr/local/share/man" \
              	"$PACKAGE_DIR/usr/man"; do

              	if [ -d "$mandir" ]; then
              		mkdir -p "/home/build/melange-out/openssl-doc/usr/share/man"
              		mv "$mandir"/* "/home/build/melange-out/openssl-doc/usr/share/man/"
              		rmdir --parents --ignore-fail-on-non-empty "$mandir"
              	fi
              done
      - runs: |
          mv "/home/build/melange-out/openssl"/usr/share/doc "/home/build/melange-out/openssl-doc"/usr/share
    description: OpenSSL documentation
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - apk-tools
            - grep
            - man-db
            - openssl-doc
            - texinfo
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/docs
          pipeline:
            - name: docs readability check
              runs: |
                doc_pkg=$(basename /home/build/melange-out/openssl-doc)
                if [ $(apk info -qL "$doc_pkg" | grep -v "^var/lib/db/sbom" | grep -v "^$" | wc -l) -eq 0 ]; then
                	echo "See:"
                	apk info -qL "$doc_pkg"
                	echo "This package [$doc_pkg] is completely empty (i.e. installs no files)."
                	echo "Please check the package build for proper docs installation, and either:"
                	echo "  (a) fix the docs subpackage build to actually include documentation (check the split/manpages and split/infodir pipelines), or"
                	echo "  (b) remove the test/docs pipeline (if for some reason we want an empty docs package), or"
                	echo "  (c) remove the docs subpackage entirely"
                	exit 1
                fi
                cd /
                doc_files=false
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/man/" | grep -v "^usr/share/man/db/"); do
                	if [ -f /"$doc_file" ]; then

                		man -l /"$doc_file" >/dev/null
                		doc_files=true
                	fi
                done
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/info/"); do
                	if [ -f /"$doc_file" ]; then

                		[ $(info -f /"$doc_file" -o - | wc -l) -gt 0 ] && doc_files=true
                	fi
                done
                for doc_file in $(apk info -qL "$doc_pkg" | grep "^usr/share/"); do
                	if [ -f /"$doc_file" ]; then

                		cat /"$doc_file" >/dev/null
                		doc_files=true
                	fi
                done
                if [ $doc_files = "false" ]; then
                	echo "See:"
                	apk info -qL "$doc_pkg"
                	echo "This package [$doc_pkg] installs files, but no usable documentation"
                	echo "Please check the package build for proper docs installation, and either:"
                	echo "  (a) fix the docs subpackage build to actually include docs (check the split/manpages and split/infodir pipelines), or"
                	echo "  (b) remove the test/docs pipeline"
                	exit 1
                fi
  - name: libcrypto3
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/libcrypto3"/usr/lib
          mv "/home/build/melange-out/openssl"/usr/lib/libcrypto.so.3 "/home/build/melange-out/libcrypto3"/usr/lib
          mkdir -p "/home/build/melange-out/libcrypto3"/etc/ssl
          cp ca.cnf /home/build/melange-out/libcrypto3/etc/ssl/
    description: OpenSSL libcrypto library
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - libcrypto3
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="libcrypto3" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: libssl3
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/libssl3"/usr/lib
          mv "/home/build/melange-out/openssl"/usr/lib/libssl.so.3 "/home/build/melange-out/libssl3"/usr/lib
    description: OpenSSL libssl library
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - libssl3
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="libssl3" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-dev
    pipeline:
      - uses: split/dev
        pipeline:
          - runs: |
              PACKAGE_DIR="/home/build/melange-out/openssl"
              if [ -n "" ]; then
              	PACKAGE_DIR="/home/build/melange-out/"
              fi
              if [ "$PACKAGE_DIR" == "/home/build/melange-out/openssl-dev" ]; then
              	echo "ERROR: Package can not split files from itself!" && exit 1
              fi
              i= j=
              cd "$PACKAGE_DIR" || exit 0
              libdirs=usr/
              [ -d lib/ ] && libdirs="lib/ $libdirs"
              for i in usr/include usr/lib/pkgconfig usr/share/pkgconfig \
              	usr/share/aclocal usr/share/gettext \
              	usr/bin/*-config usr/bin/*_config usr/share/vala/vapi \
              	usr/share/gir-[0-9]* usr/share/qt*/mkspecs \
              	usr/lib/qt*/mkspecs \
              	usr/lib/cmake usr/share/cmake \
              	usr/lib/glade/modules usr/share/glade/catalogs \
              	$(find . -name include -type d) \
              	$(find $libdirs -name '*.a' 2>/dev/null) \
              	$(find $libdirs -name '*.[cho]' \
              		-o -name '*.prl' 2>/dev/null); do
              	if [ -e "$PACKAGE_DIR/$i" ] || [ -L "$PACKAGE_DIR/$i" ]; then
              		d="/home/build/melange-out/openssl-dev/${i%/*}"
              		mkdir -p "$d"
              		mv "$PACKAGE_DIR/$i" "$d"
              		rmdir "$PACKAGE_DIR/${i%/*}" 2>/dev/null || :
              	fi
              done
              for i in lib/*.so usr/lib/*.so; do
              	if [ -L "$i" ]; then
              		mkdir -p "/home/build/melange-out/openssl-dev"/"${i%/*}"
              		mv "$i" "/home/build/melange-out/openssl-dev/$i" || return 1
              	fi
              done
    dependencies:
      runtime:
        - jitterentropy-library-dev
        - jitterentropy-library
    description: OpenSSL headers
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-dev
            - pkgconf
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/pkgconf
          pipeline:
            - name: pkgconf build dependency check
              runs: |
                dev_pkg=$(basename /home/build/melange-out/openssl-dev)
                cd /
                pc_files=false
                for pc_file in $(apk info -L "$dev_pkg" 2>/dev/null | grep "\.pc$"); do
                	pc_files=true

                	if grep -q "^Name:" $pc_file; then
                		lib_name=$(basename "$pc_file" ".pc")

                		echo "$pc_file" | grep -q "^usr/lib/pkgconfig/${lib_name}.pc$\|^usr/share/pkgconfig/${lib_name}.pc$"

                		pkgconf --exists $lib_name || pkgconf --print-errors --exists $lib_name

                		if grep -q "^Version:" $pc_file; then
                			pkgconf --modversion $lib_name
                		fi

                		if grep -q "^Libs:" $pc_file; then
                			pkgconf --libs $lib_name
                		fi

                		if grep -q "^Cflags:" $pc_file; then
                			pkgconf --cflags $lib_name
                		fi
                	fi
                done
                if [ $pc_files = "false" ]; then
                	echo "No .pc files found in $dev_pkg please remove the pkgconf test"
                fi
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-dev" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-engine-afalg
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/openssl-engine-afalg"/usr/lib/engines-3
          mv "/home/build/melange-out/openssl"/usr/lib/engines-3/afalg.so "/home/build/melange-out/openssl-engine-afalg"/usr/lib/engines-3/
    description: OpenSSL Linux AF_ALG engine
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-engine-afalg
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-engine-afalg" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-engine-capi
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/openssl-engine-capi"/usr/lib/engines-3
          mv "/home/build/melange-out/openssl"/usr/lib/engines-3/capi.so "/home/build/melange-out/openssl-engine-capi"/usr/lib/engines-3/
    description: OpenSSL CAPI engine
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-engine-capi
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-engine-capi" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-engine-padlock
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/openssl-engine-padlock"/usr/lib/engines-3
          mv "/home/build/melange-out/openssl"/usr/lib/engines-3/padlock.so "/home/build/melange-out/openssl-engine-padlock"/usr/lib/engines-3/
    description: OpenSSL VIA Padlock engine
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-engine-padlock
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-engine-padlock" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-engine-loader-attic
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/openssl-engine-loader-attic"/usr/lib/engines-3
          mv "/home/build/melange-out/openssl"/usr/lib/engines-3/loader_attic.so "/home/build/melange-out/openssl-engine-loader-attic"/usr/lib/engines-3/
    description: OpenSSL Loader Attic internal test engine
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-engine-loader-attic
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-engine-loader-attic" \
                	--extra-library-paths="" \
                	--verbose="false"
  - name: openssl-provider-legacy
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/openssl-provider-legacy"/usr/lib/ossl-modules
          mv "/home/build/melange-out/openssl"/usr/lib/ossl-modules/legacy.so "/home/build/melange-out/openssl-provider-legacy"/usr/lib/ossl-modules/
    description: OpenSSL legacy provider
    commit: bea0f7b0984dd631538eb15205c930b83d5ea7c8
    test:
      environment:
        contents:
          packages:
            - ldd-check
            - openssl-provider-legacy
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - uses: test/tw/ldd-check
          pipeline:
            - name: check for missing library dependencies using ldd
              runs: |
                ldd-check \
                	--files="" \
                	--exclude-files="" \
                	--packages="openssl-provider-legacy" \
                	--extra-library-paths="" \
                	--verbose="false"
update:
  enabled: true
  manual: false
  require-sequential: false
  github:
    identifier: openssl/openssl
    strip-prefix: openssl-
    tag-filter-prefix: openssl-
test:
  environment:
    contents:
      packages:
        - bash
        - busybox
        - curl
        - gdb
        - git
        - hardening-check
        - openssl
        - openssl-dbg
        - wget
    accounts:
      run-as: ""
      users:
        - username: build
          uid: 1000
          gid: 1000
          shell: ""
          homedir: ""
      groups:
        - groupname: build
          gid: 1000
          members:
            - build
  pipeline:
    - uses: test/hardening-check
      with:
        package-match: ^openssl$\|libssl3
      pipeline:
        - name: check files for hardening flags
          runs: |
            cat <<"END_CHECK" >/tmp/hardening-check-files
            #!/bin/bash
            set -o errexit -o nounset -o errtrace -o pipefail
            r=0

            checkfile() {
                arch_skip=
                # full cfprotection is x86 only for now
                if [ "x86_64" = "aarch64" ]; then
                    arch_skip=--nocfprotection
                fi
                # the branch protection check is ARM only for now
                [ "x86_64" = "aarch64" ] || arch_skip=--nobranchprotection

                ### <DELETE WHEN GLIBC OPENSSF HARDENING IS RE-ENABLED>
                if [ "x86_64" = "aarch64" ]; then
                  arch_skip="$arch_skip --nobranchprotection"
                fi
                ### </DELETE>

                hardening-check $arch_skip  --color $1
            }

            debug() {
                [ "$DEBUG" = "true" ] || return 0
                echo "$@"
            }
            packages=false
            if [ "$1" = "--package" ]; then
                packages=true
                shift
            fi

            TEMP_D=$(mktemp -d)
            trap "rm -Rf '${TEMP_D}'" EXIT

            errors=0
            files=0
            DEBUG=false
            command -v readelf >/dev/null 2>&1 ||
                { echo "ERROR: You need 'readelf' executable"; exit 1; }

            if [ "$packages" = "true" ]; then
                flist="${TEMP_D}/files"
                cd /
                for pkg in "$@"; do
                    apk info --quiet -L "$pkg" > "$flist" || {
                        echo "failed to list contents of $pkg"
                        exit 1
                    }
                    debug ":: $pkg"
                    while read f; do
                        # apk info -L adds a blank line at the end.
                        [ -z "$f" ] && continue
                        [ -d "$f" ] && continue
                        outf="${TEMP_D}/version.out"
                        errf="${TEMP_D}/version.err"
                        set +e
                        LANG=C readelf -hW "$f" > "$outf" 2> "$errf"
                        rc=$?
                        set -e
                        if grep -qi "readelf: Error: Not an ELF file" "$errf"; then
                            debug "$f: not an ELF file"
                            continue
                        fi
                        if grep -qi "readelf: Error: .*: Failed to read file.*" "$errf"; then
                            debug "$f: not an ELF file"
                            continue
                        fi
                        checkfile "$f" || errors=$((errors+1))
                        files=$((files+1))
                    done < "$flist"
                done
            else
                for path in "$@"; do
                    if [ -f "$path" ]; then
                        checkfile "$path" || errors=$((errors+1))
                        files=$((files+1))
                    else
                        echo "ERROR: $path is not a file!"
                        exit 2
                    fi
                done
            fi

            result=FAIL
            rc=1
            [ $errors -eq 0 ] && { result="PASS"; rc=0; }

            echo "$result: $files checked. $errors hardening failures found."
            exit $rc
            END_CHECK
            chmod 755 /tmp/hardening-check-files
            pkgmatch='^openssl$\|libssl3'
            pkgname='openssl'
            if [ "${pkgmatch}" = "DEFAULT" ]; then
            	pkgmatch="^${pkgname}"
            fi
            pfile=/tmp/packages.list
            if ! apk info -L >"$pfile" 2>"$pfile.err"; then
            	echo "ERROR: apk info -L failed"
            	cat "$pfile" "$pfile.err"
            	exit 1
            fi
            packages=$(grep "$pkgmatch" "$pfile") || :
            set -- ${packages}
            if [ $# -eq 0 ]; then
            	echo "packages:"
            	sed 's,^,>  ,' "$pfile"
            	echo "ERROR: package-match '$pkgmatch'" \
            		"did not match any installed packages (see list above)"
            	exit 1
            fi
            echo "checking $# packages: $*"
            /tmp/hardening-check-files --package "$@"
    - uses: test/hardening-check
      with:
        args: --nocfprotection
        package-match: ^libcrypto3$
      pipeline:
        - name: check files for hardening flags
          runs: |
            cat <<"END_CHECK" >/tmp/hardening-check-files
            #!/bin/bash
            set -o errexit -o nounset -o errtrace -o pipefail
            r=0

            checkfile() {
                arch_skip=
                # full cfprotection is x86 only for now
                if [ "x86_64" = "aarch64" ]; then
                    arch_skip=--nocfprotection
                fi
                # the branch protection check is ARM only for now
                [ "x86_64" = "aarch64" ] || arch_skip=--nobranchprotection

                ### <DELETE WHEN GLIBC OPENSSF HARDENING IS RE-ENABLED>
                if [ "x86_64" = "aarch64" ]; then
                  arch_skip="$arch_skip --nobranchprotection"
                fi
                ### </DELETE>

                hardening-check $arch_skip --nocfprotection --color $1
            }

            debug() {
                [ "$DEBUG" = "true" ] || return 0
                echo "$@"
            }
            packages=false
            if [ "$1" = "--package" ]; then
                packages=true
                shift
            fi

            TEMP_D=$(mktemp -d)
            trap "rm -Rf '${TEMP_D}'" EXIT

            errors=0
            files=0
            DEBUG=false
            command -v readelf >/dev/null 2>&1 ||
                { echo "ERROR: You need 'readelf' executable"; exit 1; }

            if [ "$packages" = "true" ]; then
                flist="${TEMP_D}/files"
                cd /
                for pkg in "$@"; do
                    apk info --quiet -L "$pkg" > "$flist" || {
                        echo "failed to list contents of $pkg"
                        exit 1
                    }
                    debug ":: $pkg"
                    while read f; do
                        # apk info -L adds a blank line at the end.
                        [ -z "$f" ] && continue
                        [ -d "$f" ] && continue
                        outf="${TEMP_D}/version.out"
                        errf="${TEMP_D}/version.err"
                        set +e
                        LANG=C readelf -hW "$f" > "$outf" 2> "$errf"
                        rc=$?
                        set -e
                        if grep -qi "readelf: Error: Not an ELF file" "$errf"; then
                            debug "$f: not an ELF file"
                            continue
                        fi
                        if grep -qi "readelf: Error: .*: Failed to read file.*" "$errf"; then
                            debug "$f: not an ELF file"
                            continue
                        fi
                        checkfile "$f" || errors=$((errors+1))
                        files=$((files+1))
                    done < "$flist"
                done
            else
                for path in "$@"; do
                    if [ -f "$path" ]; then
                        checkfile "$path" || errors=$((errors+1))
                        files=$((files+1))
                    else
                        echo "ERROR: $path is not a file!"
                        exit 2
                    fi
                done
            fi

            result=FAIL
            rc=1
            [ $errors -eq 0 ] && { result="PASS"; rc=0; }

            echo "$result: $files checked. $errors hardening failures found."
            exit $rc
            END_CHECK
            chmod 755 /tmp/hardening-check-files
            pkgmatch='^libcrypto3$'
            pkgname='openssl'
            if [ "${pkgmatch}" = "DEFAULT" ]; then
            	pkgmatch="^${pkgname}"
            fi
            pfile=/tmp/packages.list
            if ! apk info -L >"$pfile" 2>"$pfile.err"; then
            	echo "ERROR: apk info -L failed"
            	cat "$pfile" "$pfile.err"
            	exit 1
            fi
            packages=$(grep "$pkgmatch" "$pfile") || :
            set -- ${packages}
            if [ $# -eq 0 ]; then
            	echo "packages:"
            	sed 's,^,>  ,' "$pfile"
            	echo "ERROR: package-match '$pkgmatch'" \
            		"did not match any installed packages (see list above)"
            	exit 1
            fi
            echo "checking $# packages: $*"
            /tmp/hardening-check-files --package "$@"
    - runs: |
        openssl --version
        openssl --help
    - name: Verify curl still works
      runs: |
        curl -I https://github.com/openssl/openssl
        ! curl https://expired.badssl.com/
    - name: Verify git still works
      runs: |
        git ls-remote --exit-code https://github.com/openssl/openssl refs/tags/openssl-3.5.2
    - name: Verify wget still works
      runs: |
        wget -O /dev/null https://github.com/openssl/openssl
        ! wget https://expired.badssl.com/
    - name: Verify jitter cherry-pick has no effect by default
      runs: |
        cat <<EOF >openssl.gdb
        set pagination off
        set logging file gdb.log
        set logging on
        set width 0
        set height 0
        set verbose off
        set breakpoint pending on
        break get_jitter_random_value
        commands 1
          continue
        end
        break syscall_random
        commands 2
          continue
        end
        run genrsa -out /dev/null
        EOF
        gdb --batch --command ./openssl.gdb openssl
        grep -q 'Breakpoint 1,' gdb.log && exit 1
        grep -q 'Breakpoint 2,' gdb.log || exit 1
    - name: Verify jitter entropy source opt-in works
      runs: |
        cat <<EOF >openssl.cnf
        openssl_conf = openssl_init
        [openssl_init]
        providers = provider_sect
        random = random
        [random]
        seed = JITTER
        [provider_sect]
        default = default_sect
        [default_sect]
        activate = 1
        EOF
        export OPENSSL_CONF=openssl.cnf
        cat <<EOF >openssl.gdb
        set pagination off
        set logging file jitter.log
        set logging on
        set width 0
        set height 0
        set verbose off
        set breakpoint pending on
        break get_jitter_random_value
        commands 1
          continue
        end
        break syscall_random
        commands 2
          continue
        end
        run genrsa -out /dev/null
        EOF
        gdb --batch --command ./openssl.gdb openssl
        grep -q 'Breakpoint 1,' jitter.log || exit 1
        grep -q 'Breakpoint 2,' jitter.log && exit 1
    - name: docker-dind certificate generation
      runs: |
        set -x
        tmpdir="$(mktemp -d)"
        trap "rm -rf "$tmpdir"" EXIT
        rm -rf "$tmpdir/certs/"
        mkdir -p "$tmpdir/certs/ca"
        openssl genrsa -out "$tmpdir/certs/ca/key.pem" 4096
        openssl req -new -key "$tmpdir/certs/ca/key.pem" \
        	-out "$tmpdir/certs/ca/cert.pem" -subj '/CN=docker:dind CA' \
        	-x509 -days 825
        mkdir -p "$tmpdir/certs/server"
        openssl genrsa -out "$tmpdir/certs/server/key.pem" 4096
        openssl req -new -key "$tmpdir/certs/server/key.pem" \
        	-out "$tmpdir/certs/server/csr.pem" -subj '/CN=docker:dind server'
        cat <<EOF >"$tmpdir/certs/server/openssl.cnf"
        [ x509_exts ]
        subjectAltName = DNS:b51ddd7b8dcd,DNS:docker,DNS:localhost,IP:127.0.0.1,IP:172.17.0.4,IP:::1
        EOF
        openssl x509 -req -in "$tmpdir/certs/server/csr.pem" \
        	-CA "$tmpdir/certs/ca/cert.pem" -CAkey "$tmpdir/certs/ca/key.pem" \
        	-CAcreateserial -out "$tmpdir/certs/server/cert.pem" \
        	-days 825 -extfile "$tmpdir/certs/server/openssl.cnf" \
        	-extensions x509_exts
        cp "$tmpdir/certs/ca/cert.pem" "$tmpdir/certs/server/ca.pem"
        openssl verify -CAfile "$tmpdir/certs/server/ca.pem" \
        	"$tmpdir/certs/server/cert.pem"
