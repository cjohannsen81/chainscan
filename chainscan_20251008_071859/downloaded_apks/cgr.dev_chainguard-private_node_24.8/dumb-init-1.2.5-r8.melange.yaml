package:
  name: dumb-init
  version: 1.2.5
  epoch: 8
  description: minimal init system for Linux containers
  commit: c76e6993c59b095dc8c5c9bdbd4747e6908a7867
  copyright:
    - license: MIT
  resources: {}
environment:
  contents:
    build_repositories:
      - https://apk.cgr.dev/chainguard
      - https://packages.wolfi.dev/os
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
      - bash=5.3-r2
      - binutils=2.44-r10
      - build-base=1-r8
      - busybox=1.37.0-r47
      - ca-certificates-bundle=20250619-r3
      - cyrus-sasl=2.1.28-r42
      - gcc=15.1.0-r2
      - gdbm=1.25-r3
      - git=2.50.1-r1
      - glibc-dev=2.41-r54
      - glibc-locale-posix=2.41-r54
      - glibc=2.41-r54
      - gmp=6.3.0-r8
      - heimdal-libs=7.8.0-r42
      - isl=0.27-r4
      - keyutils-libs=1.6.3-r36
      - krb5-conf=1.0-r7
      - krb5-libs=1.21.3-r43
      - ld-linux=2.41-r54
      - libatomic=15.1.0-r2
      - libbrotlicommon1=1.1.0-r6
      - libbrotlidec1=1.1.0-r6
      - libcap-utils=2.76-r5
      - libcap=2.76-r5
      - libcom_err=1.47.2-r23
      - libcrypt1=2.41-r54
      - libcrypto3=3.5.1-r0
      - libcurl-openssl4=8.15.0-r1
      - libexpat1=2.7.1-r2
      - libgcc=15.1.0-r2
      - libgo=15.1.0-r2
      - libgomp=15.1.0-r2
      - libidn2=2.3.8-r3
      - libldap=2.6.10-r4
      - libnghttp2-14=1.66.0-r1
      - libpcre2-8-0=10.45-r3
      - libpsl=0.21.5-r6
      - libquadmath=15.1.0-r2
      - libssl3=3.5.1-r0
      - libstdc++-dev=15.1.0-r2
      - libstdc++=15.1.0-r2
      - libunistring=1.3-r4
      - libverto=0.3.2-r6
      - libxcrypt-dev=4.4.38-r2
      - libxcrypt=4.4.38-r2
      - libzstd1=1.5.7-r2
      - linux-headers=6.15.7-r0
      - make=4.4.1-r8
      - mpc=1.3.1-r7
      - mpfr=4.2.2-r2
      - ncurses-terminfo-base=6.5_p20250621-r0
      - ncurses=6.5_p20250621-r0
      - nss-db=2.41-r54
      - nss-hesiod=2.41-r54
      - openssf-compiler-options=20240627-r25
      - pkgconf=2.5.1-r1
      - posix-cc-wrappers=1-r7
      - readline=8.3-r1
      - scanelf=1.3.8-r5
      - sqlite-libs=3.50.3-r1
      - wolfi-baselayout=20230201-r23
      - zlib=1.3.1-r51
  accounts:
    run-as: ""
    users:
      - username: build
        uid: 1000
        gid: 1000
        shell: ""
        homedir: /home/build
    groups:
      - groupname: build
        gid: 1000
        members:
          - build
  archs:
    - amd64
  environment:
    GOFLAGS: ""
    GOMODCACHE: /var/cache/melange/gomodcache
    GOPATH: /home/build/.cache/go
    GOTOOLCHAIN: local
    HOME: /home/build
    PYTHONHASHSEED: "0"
pipeline:
  - uses: git-checkout
    with:
      expected-commit: 89c1502b9d40b5cb4a844498b14d74ba1dd559bf
      repository: https://github.com/Yelp/dumb-init
      tag: v1.2.5
    pipeline:
      - runs: |
          #!/bin/sh
          set -e
          msg() { echo "[git checkout]" "$@"; }
          fail() {
          	msg FAIL "$@"
          	exit 1
          }
          vr() {
          	msg "execute:" "$@"
          	"$@"
          }
          process_cherry_picks() {
          	local cpicksf="$1" oifs="$IFS" count=0
          	local fetched_branches=""
          	local sdate=${SOURCE_DATE_EPOCH:-0}
          	if [ "$sdate" -lt 315532800 ]; then
          		msg "Setting commit date to Jan 1, 1980 (SOURCE_DATE_EPOCH found ${SOURCE_DATE_EPOCH})"
          		sdate=315532800
          	fi
          	if [ -z "$cpicksf" ]; then
          		return 0
          	fi
          	if [ ! -f "$cpicksf" ]; then
          		msg "cherry picks input '$cpicksf' is not a file"
          		return 1
          	fi

          	local line="" branch="" hash="" comment=""
          	while IFS= read -r line; do

          		line=${line%%#*}
          		[ -z "$line" ] && continue

          		if ! echo "$line" | grep -q ':'; then
          			msg "Invalid format, expected '[branch/]commit: comment'. Found: $line"
          			return 1
          		fi

          		branch=${line%%:*}
          		comment=${line#*:}
          		comment=$(
          			set -f
          			echo $comment
          		)

          		if [ -z "$comment" ]; then
          			msg "Empty comment for cherry-pick: $line"
          			return 1
          		fi

          		hash=${branch##*/}

          		[ "$branch" != "$hash" ] && branch=${branch%/*} || branch=""

          		if [ -n "$branch" ]; then
          			case " $fetched_branches " in
          			*" $branch "*) ;;
          			*)
          				vr git fetch origin $branch:$branch || {
          					msg "failed to fetch branch $branch"
          					return 1
          				}
          				fetched_branches="$fetched_branches $branch "
          				;;
          			esac
          		fi

          		vr env \
          			GIT_COMMITTER_DATE="@$sdate" \
          			git cherry-pick -x "$hash" || {
          			msg "failed to cherry-pick $hash from branch $branch"
          			return 1
          		}

          		msg "Cherry-picked $hash from $branch with comment: $comment"

          		count=$((count + 1))
          	done <"$cpicksf"

          	if [ $count -gt 0 ]; then
          		msg "applied $count cherry-pick(s). head is now $(git rev-parse HEAD)"
          	fi
          }
          main() {
          	local repo=$1 dest=${2:-.} depth=${3:-"unset"} branch=$4
          	local tag=$5 expcommit=$6 recurse=${7:-false}
          	local cherry_pick="$8"
          	msg "repo='$repo' dest='$dest' depth='$depth' branch='$branch'" \
          		"tag='$tag' expcommit='$expcommit' recurse='$recurse'"

          	case "$recurse" in
          	true | false) : ;;
          	*) fail "recurse must be true or false, not '$recurse'" ;;
          	esac

          	[ -n "$repo" ] || fail "repository not provided"

          	if [ -z "$branch" ] && [ -z "$tag" ]; then
          		msg "Warning: you have not specified a branch or tag."
          	elif [ -n "$branch" ] && [ -n "$tag" ]; then
          		fail "both branch ($branch) and tag ($tag) are specified."
          	fi

          	[ -n "$expcommit" ] ||
          		msg "Warning: no expected-commit"

          	local flags="" depthflag="" dest_fullpath="" workdir=""
          	local remote="origin" rcfile="" rc="" quiet="--quiet"
          	flags="--config=advice.detachedHead=false"
          	[ -n "$branch" ] && flags="$flags --branch=$branch"
          	[ -n "$tag" ] && flags="$flags --branch=$tag"
          	[ "$recurse" = "true" ] && flags="$flags --recurse-submodules"

          	if [ "$depth" = "unset" ]; then
          		depth=1
          		if [ -n "$branch" -a -n "$expcommit" ]; then

          			depth=-1
          		fi
          	fi

          	[ "$depth" = "-1" ] || depthflag="--depth=$depth"

          	workdir=$(mktemp -d)
          	rcfile=$(mktemp)
          	mkdir -p "$dest"
          	dest_fullpath=$(realpath "$dest")

          	vr git config --global --add safe.directory "$workdir"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	vr git clone $quiet "--origin=$remote" \
          		"--config=user.name=Melange Build" \
          		"--config=user.email=melange-build@cgr.dev" \
          		$flags \
          		${depthflag:+"$depthflag"} "$repo" "$workdir"

          	vr cd "$workdir"
          	msg "tar -c . | tar -C \"$dest_fullpath\" -x"
          	(
          		tar -c .
          		echo $? >"$rcfile"
          	) | tar -C "$dest_fullpath" -x --no-same-owner
          	read rc <"$rcfile" || fail "failed to read rc file"
          	[ $rc -eq 0 ] || fail "tar creation in $workdir failed"

          	rm -rf "$workdir"
          	vr cd "$dest_fullpath"
          	vr git config --global --add safe.directory "$dest_fullpath"

          	local foundcommit="" tagobj=""
          	if [ -z "$tag" ]; then
          		foundcommit=$(git rev-parse --verify HEAD)
          		if [ -n "$expcommit" ] && [ "$expcommit" != "$foundcommit" ]; then
          			if [ "$depth" = "-1" ]; then
          				msg "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, performing reset"
          				vr git reset --hard "$expcommit"
          			else
          				fail "expected commit $expcommit on ${branch:-HEAD}," \
          					"got $foundcommit, set depth to -1 to attempt a reset"
          			fi
          		fi
          		msg "tip of ${branch:-HEAD} is commit $foundcommit"
          		process_cherry_picks "$cherry_pick" || fail "failed to apply cherry-pick"
          		return 0
          	fi

          	vr git fetch $quiet $remote ${depthflag:-"$depthflag"} --no-tags \
          		"+refs/tags/$tag:refs/$remote/tags/$tag"
          	vr git checkout $quiet "$remote/tags/$tag"

          	foundcommit=$(git rev-parse --verify HEAD)
          	if [ -z "$expcommit" ] || [ "$expcommit" = "$foundcommit" ]; then
          		msg "tag $tag is $foundcommit"
          	else

          		tagobj=$(git rev-parse --verify --end-of-options \
          			"refs/$remote/tags/$tag")
          		if [ "$expcommit" != "$tagobj" ]; then
          			[ "$tagobj" != "$expcommit" ] &&
          				msg "tag object hash was $tagobj"
          			fail "Expected commit $expcommit for $tag, found $foundcommit"
          		fi

          		msg "Warning: The provided expected-commit ($expcommit)"
          		msg "was the hash of the annotated tag object for $tag."
          		msg "Update to set expected-commit to $foundcommit"
          	fi

          	process_cherry_picks "$cherry_pick" ||
          		fail "failed to apply cherry-pick"

          	return 0
          }
          cpickf=$(mktemp) || {
          	echo "failed mktemp"
          	exit 1
          }
          cat >"$cpickf" <<"END_CHERRY_PICKS"

          END_CHERRY_PICKS
          main \
          	"https://github.com/Yelp/dumb-init" "." \
          	"unset" "" \
          	"v1.2.5" "89c1502b9d40b5cb4a844498b14d74ba1dd559bf" \
          	"false" "$cpickf"
          rm -f "$cpickf"
  - uses: autoconf/make
    pipeline:
      - runs: |
          make -C "." -j$(nproc) V=1
  - runs: |
      install -sD -m 755 dumb-init /home/build/melange-out/dumb-init/usr/bin/dumb-init
  - uses: strip
    pipeline:
      - runs: |
          scanelf --recursive --nobanner --osabi --etype "ET_DYN,ET_EXEC" . |
          	while read type osabi filename; do

          		[ "$osabi" != "STANDALONE" ] || continue

          		strip -g "${filename}" || [ ! -e "$filename" ]
          	done
        working-directory: /home/build/melange-out/dumb-init
subpackages:
  - name: dumb-init-privileged-netbindservice
    pipeline:
      - runs: |
          mkdir -p "/home/build/melange-out/dumb-init-privileged-netbindservice/usr/bin"
          cp "/home/build/melange-out/dumb-init/usr/bin/dumb-init" "/home/build/melange-out/dumb-init-privileged-netbindservice/usr/bin/"
          setcap cap_net_bind_service=+ep "/home/build/melange-out/dumb-init-privileged-netbindservice/usr/bin/dumb-init"
    options:
      no-provides: true
    description: Allows to bind to ports less than 1024
    commit: c76e6993c59b095dc8c5c9bdbd4747e6908a7867
    test:
      environment:
        contents:
          packages:
            - dumb-init-privileged-netbindservice
        accounts:
          run-as: ""
          users:
            - username: build
              uid: 1000
              gid: 1000
              shell: ""
              homedir: ""
          groups:
            - groupname: build
              gid: 1000
              members:
                - build
      pipeline:
        - runs: |
            stat "/usr/bin/dumb-init"
update:
  enabled: true
  manual: false
  require-sequential: false
  github:
    identifier: Yelp/dumb-init
    strip-prefix: v
    use-tag: true
test:
  environment:
    contents:
      packages:
        - dumb-init
    accounts:
      run-as: ""
      users:
        - username: build
          uid: 1000
          gid: 1000
          shell: ""
          homedir: ""
      groups:
        - groupname: build
          gid: 1000
          members:
            - build
  pipeline:
    - runs: |
        dumb-init --version
        dumb-init --help
